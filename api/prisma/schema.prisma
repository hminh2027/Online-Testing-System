generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Grade {
  primary
  secondary
  highschool
  college
  university
  other
}

enum RequestStatus {
  pending
  accepted
  declined
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  fullname  String
  password  String    @db.LongText
  isTeacher Boolean   @default(false)
  phone     String?
  birth     DateTime?
  school    String?
  studentId String?   @unique
  imageUrl  String?
  createdAt DateTime  @default(now())

  // relations
  Classes           Class[]
  Exam              Exam[]
  Attempt           Attempt[]
  Post              Post[]
  Comment           Comment[]
  Notification      Notification[]
  User_Notification User_Notification[]
  UserClass         UserClass[]
}

model UserClass {
  id Int @id @default(autoincrement())

  studentId Int
  classId   Int

  // relations
  User  User  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Class Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([studentId, classId])
}

model Class {
  id                     Int         @id @default(autoincrement())
  teacherId              Int
  name                   String
  imageUrl               String?
  description            String?     @db.LongText
  grade                  Grade
  password               String?
  isStudentApprovalJoin  Boolean     @default(false)
  isStudentApprovalLeave Boolean     @default(false)
  isActive               Boolean     @default(true)
  createdAt              DateTime    @default(now())
  // relations
  Users                  User[]
  ClassExam              ClassExam[]
  Post                   Post[]
  UserClass              UserClass[]
  Resource               Resource[]
}

model Exam {
  id          Int         @id @default(autoincrement())
  teacherId   Int
  title       String
  description String?     @db.LongText
  duration    Int
  createdAt   DateTime    @default(now())
  // relations
  User        User        @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ExamIndex   ExamIndex[]
  ClassExam   ClassExam[]
}

model ExamIndex {
  id       Int        @id @default(autoincrement())
  examId   Int
  index    Int
  // relations
  Exam     Exam       @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question Question[]
  Attempt  Attempt[]

  // constraints
  @@unique([examId, index])
}

model Question {
  id          Int       @id @default(autoincrement())
  examIndexId Int
  index       Int
  imageUrl    String?   @db.LongText
  content     String    @db.LongText
  score       Int
  // relations
  ExamIndex   ExamIndex @relation(fields: [examIndexId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Answer      Answer[]
  Choice      Choice[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  index      Int
  content    String   @db.LongText
  isCorrect  Boolean  @default(false)
  // relations
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Choice     Choice[]
}

model ClassExam {
  id           Int       @id @default(autoincrement())
  classId      Int
  examId       Int
  startTime    DateTime  @default(now())
  deadlineAt   DateTime?
  attemptLimit Int?      @default(0)
  isSubmitLate Boolean?  @default(true)
  isShuffle    Boolean?  @default(false)
  isShowAnswer Boolean?  @default(true)
  createdAt    DateTime  @default(now())
  // relations
  Class        Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Exam         Exam      @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Attempt {
  id          Int       @id @default(autoincrement())
  studentId   Int
  examIndexId Int
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  score       Float?
  tabout      Int       @default(0)
  // relations
  User        User      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ExamIndex   ExamIndex @relation(fields: [examIndexId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Choice      Choice[]
}

model Choice {
  id            Int      @id @default(autoincrement())
  attemptId     Int
  questionIndex Int
  answerIndex   Int
  // relations
  Attempt       Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question      Question @relation(fields: [questionIndex], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Answer        Answer   @relation(fields: [answerIndex], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id                  Int       @id @default(autoincrement())
  userId              Int
  classId             Int
  content             String
  imageUrl            String?   @db.LongText
  allowStudentComment Boolean   @default(true)
  createdAt           DateTime  @default(now())
  // relations
  User                User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Class               Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Comment             Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  // relations
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id                Int                 @id @default(autoincrement())
  userId            Int
  requestId         Int?                @unique
  content           String
  url               String
  createdAt         DateTime            @default(now())
  // relations
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Request           Request?            @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User_Notification User_Notification[]
}

model Request {
  id           Int           @id @default(autoincrement())
  status       RequestStatus
  // relations
  Notification Notification?
}

model User_Notification {
  id           Int          @id @default(autoincrement())
  notiId       Int
  userId       Int
  isRead       Boolean      @default(false)
  // relations
  Notification Notification @relation(fields: [notiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Resource {
  id        Int      @id @default(autoincrement())
  classId   Int
  name      String
  url       String
  createdAt DateTime @default(now())
  // relations
  Class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
