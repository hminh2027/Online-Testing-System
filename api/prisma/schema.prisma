generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  fullname  String
  password  String    @db.LongText
  isTeacher Boolean   @default(false)
  phone     String?
  birth     DateTime?
  school    String?
  studentId String?   @unique
  imageUrl  String?
  createdAt DateTime  @default(now())

  // relations
  Classes           Class[]
  Exam              Exam[]
  Attempt           Attempt[]
  Post              Post[]
  Comment           Comment[]
  Notification      Notification[]
  User_Notification User_Notification[]
  UserClass         UserClass[]
}

model UserClass {
  id                 Int      @id @default(autoincrement())
  studentId          Int
  classCode          String
  isPending          Boolean
  isStudentRequested Boolean
  createdAt          DateTime @default(now())
  // relations
  User               User     @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Class              Class    @relation(fields: [classCode], references: [code], onDelete: Cascade, onUpdate: Cascade)

  @@unique([studentId, classCode])
}

model Class {
  code                   String      @id
  teacherId              Int
  name                   String
  imageUrl               String?
  description            String?     @db.LongText
  password               String?
  isStudentApprovalEnter Boolean     @default(false)
  isStudentApprovalLeave Boolean     @default(false)
  isStudentPostAllowed   Boolean     @default(true)
  createdAt              DateTime    @default(now())
  // relations
  Exam                   Exam[]
  Post                   Post[]
  UserClass              UserClass[]
  User                   User        @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Exam {
  id                Int        @id @default(autoincrement())
  classCode         String?
  teacherId         Int
  title             String
  description       String?    @db.LongText
  duration          Int
  startAt           DateTime?  @default(now())
  endAt             DateTime?
  attemptLimit      Int?
  isProcting        Boolean?   @default(false)
  isShuffleQuestion Boolean?   @default(false)
  isShowAnswer      Boolean?   @default(false)
  isResumeAllowed   Boolean?   @default(false)
  createdAt         DateTime   @default(now())
  // relations
  User              User       @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question          Question[]
  Attempt           Attempt[]
  Class             Class?     @relation(fields: [classCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
}

model Question {
  id                   Int      @id @default(autoincrement())
  examId               Int
  index                Int
  imageUrl             String?  @db.LongText
  explanation          String?  @db.LongText
  content              String   @db.LongText
  point                Int
  isPointPerCorrection Boolean  @default(false)
  // relations
  Exam                 Exam     @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Answer               Answer[]
  Choice               Choice[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  questionId Int
  content    String   @db.LongText
  isCorrect  Boolean  @default(false)
  // relations
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Choice     Choice[]
}

model Attempt {
  id                 Int       @id @default(autoincrement())
  studentId          Int
  examId             Int
  startedAt          DateTime  @default(now())
  endedAt            DateTime?
  point              Float?
  numberOfMouseLeave Int?      @default(0)
  // relations
  User               User      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Exam               Exam      @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Choice             Choice[]
}

model Choice {
  id         Int      @id @default(autoincrement())
  attemptId  Int
  questionId Int
  answerId   Int
  // relations
  Attempt    Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  classCode String
  content   String
  imageUrl  String?   @db.LongText
  createdAt DateTime  @default(now())
  // relations
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Class     Class     @relation(fields: [classCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Comment   Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  // relations
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id                Int                 @id @default(autoincrement())
  userId            Int
  content           String
  url               String
  notiType          NotificationType
  createdAt         DateTime            @default(now())
  // relations
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User_Notification User_Notification[]
}

enum NotificationType {
  post
  class
  exam
}

model User_Notification {
  id           Int          @id @default(autoincrement())
  notiId       Int
  userId       Int
  isRead       Boolean      @default(false)
  // relations
  Notification Notification @relation(fields: [notiId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
