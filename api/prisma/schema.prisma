generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String
  password   String    @db.LongText
  avatar_url String    @db.LongText
  credit     Int       @default(100)
  // relationships
  ratings    Rating[]
  tests      Test[]
  drafts     Draft[]
  attempts   Attempt[]
}

model Test {
  code                String     @id
  title               String
  description         String?    @db.LongText
  image_url           String?    @db.LongText
  duration            Int
  number_of_questions Int
  start_time          DateTime   @default(now())
  end_time            DateTime?
  attempt_limit       Int        @default(0)
  is_public           Boolean    @default(true)
  is_mix              Boolean    @default(false)
  is_show_answer      Boolean    @default(false)
  created_at          DateTime   @default(now())
  userId              Int
  // relationships
  ratings             Rating[]
  User                User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questions           Question[]
  attempts            Attempt[]
  Category            Category   @relation(fields: [categoryId], references: [id])
  categoryId          Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tests Test[]
}

model Question {
  id          Int      @id @default(autoincrement())
  index       Int
  text        String   @db.LongText
  is_multiple Boolean  @default(false)
  score       Float    @default(10)
  // relationships
  Test        Test     @relation(fields: [testCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  testCode    String
  answers     Answer[]
  choices     Choice[]

  @@unique([index, testCode])
}

model Answer {
  id         Int      @id @default(autoincrement())
  index      Int
  text       String   @db.LongText
  is_correct Boolean  @default(false)
  // relationships
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId Int
  choices    Choice[]

  @@unique([index, questionId])
}

model Draft {
  id      Int    @id @default(autoincrement())
  content String @db.LongText
  // relationships
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
}

model Attempt {
  id         Int       @id @default(autoincrement())
  start_time DateTime
  end_time   DateTime?
  score      Float?
  // relationships
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  Test       Test      @relation(fields: [testCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  testCode   String
  choices    Choice[]
}

model Choice {
  id         Int      @id @default(autoincrement())
  // relationships
  Attempt    Attempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attemptId  Int
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId Int
  Answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answerId   Int
}

model Rating {
  id       Int     @id @default(autoincrement())
  rating   Int
  comment  String? @db.LongText
  // relationships
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int
  Test     Test    @relation(fields: [testCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  testCode String
}
